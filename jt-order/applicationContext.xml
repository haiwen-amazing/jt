<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 1开启包扫描 -->
	<context:component-scan base-package="com.jt" />
	
	<!-- 2引入外部配置文件(第一种给多个的时候，或者多个中不用其中一个多个的时候，非常麻烦) -->
	<!-- <context:property-placeholder location="classpath:/properties/jdbc.properties" /> -->
	<bean  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" >
			<!-- Resource[] locations	（必定配置classpath） -->
			<list>
				<value>classpath:/properties/jdbc.properties</value>
				<value>classpath:/properties/redis.properties</value>
			</list>
		</property>
	
	</bean>


	<!-- 3配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 5开启事务策略 -->
	<tx:annotation-driven/>

	<!-- 声明式事务处理 	利用AOP原理实现 
		AOP:在不影响原有业务的前提下，对方法进行扩展
		注意事项：
			1.切入点
			2.需要设定通知	（环绕、前置、后置、异常、最终）
	-->
	<!-- 5.1配置事务管理器，主要作用事务提交，回滚 -->
	<bean id="transactionManager"
	 class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 5.2编辑事务通知 	环绕通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager" >
		<!-- 配置事务策略
			propagation="REQUIRED"	执行save方法时，必须添加一个事务
			propagation="SUPPORTS"	表示事务支持的，原来所有事务则添加事务，原来没有事务就不添加
		
			事务回滚：
				1.运行时异常，事务自动回滚
				2.编译异常，事务不负责回滚
				rollback-for="指定异常类回滚" 
				no-rollback-for="指定异常类不回滚"
		 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" read-only="true" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>

	<!-- 5.3配置事务切面 -->
	<aop:config>
		<!-- 顺序：Content Model : (pointcut*, advisor*, aspect*) 
			表达式：execution(返回值类型包名.类名.方法名(参数列表))
		-->
		<aop:pointcut expression="execution(* com.jt.order.service.*.*(..))" 
		id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
	
	
	
	
	
	
	
	
	
	
	
	
	

</beans>